defaults: &defaults
  docker: # it uses the docker executor
    - image: circleci/node:13.8.0
    
# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Use a package of configuration called an orb.
orbs:
  aws-cli: circleci/aws-cli@2.0.3
  node: circleci/node@3.0.0
  slack: circleci/slack@4.4.4
  kubernetes: circleci/kubernetes@0.12.0
  aws-eks: circleci/aws-eks@0.2.3

parameters:
  circleci_image:
    type: string
    default: circleci/node:13.8.0
  amazon_image:
    type: string
    default: amazon/aws-cli
  stretch_image:
    type: string
    default: python:3.7.3-stretch

commands:
  destroy-cluster:
    description: Destroy EKS Cluster.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name eksctl-devopscapstone-nodegroup-nodegroup --region us-east-1
            aws cloudformation delete-stack --stack-name eksctl-devopscapstone-cluster --region us-east-1

  print_pipeline_id:
    description: "prints the Circle CI Workflow ID from its environment variable"
    steps:
      - run: echo ${CIRCLE_WORKFLOW_ID}

  destroy-backend-environment:
    description: Destroy back-end cloudformation stacks given a workflow ID.  
    steps:
      - run:
          name: Destroy backend environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name node-app-stack-${CIRCLE_WORKFLOW_ID:0:5}
      - notify-slack-fail
      - notify-slack

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        type: "string"   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            if aws cloudformation wait stack-exists --stack-name node-app-stack-${CIRCLE_WORKFLOW_ID:0:5}
            then
              aws cloudformation delete-stack --stack-name node-app-stack-${CIRCLE_WORKFLOW_ID:0:5}
              echo "Delete backend-stack successful"
            fi
      - notify-slack-fail
      - notify-slack

  notify-slack:
    description: notify in slack of any job pass.
    steps:
      - slack/notify:
          channel: circleci
          custom: |
            {
              "text": "CircleCI job succeeded!",              
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "✅ *Success* #${CIRCLE_BUILD_NUM} `${CIRCLE_PROJECT_REPONAME}` on `${CIRCLE_BRANCH}` :tada:",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Env*: ${ENVIRONMENT}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Job*: ${CIRCLE_JOB}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project*: $CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch*: $CIRCLE_BRANCH"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Job"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    }
                  ]
                }
              ]
            }
          event: pass 

  notify-slack-fail:
    description: notify in slack of any job fails.
    steps:
      - slack/notify:
          channel: circleci
          custom: |
            {
              "text": "",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "❌ *Failure* #${CIRCLE_BUILD_NUM} `${CIRCLE_PROJECT_REPONAME}` on `${CIRCLE_BRANCH}`"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Job"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    }
                  ]
                }
              ]
            }
          event: fail
  
# Orchestrate or schedule a set of jobs
jobs:
  pipeline_id_job: # This is our first job.
    <<: *defaults
    # Steps are a list of commands to run inside the docker container above.
    steps:
      - print_pipeline_id

  build-node-app:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [node-build]
      - run:
          name: Build node app
          command: |
            npm install
            # npm run build
      - save_cache:
          paths: [node/node_modules]
          key: node-build

  scan-node-app:
    <<: *defaults
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [node-build]
      # Your job code here
      - run:
          name: Node-app Scan
          command: |
            npm audit --audit-level=critical

  lint-node-app:
    <<: *defaults
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [node-build]
      # Your job code here
      - run:
          name: Node-app Scan
          command: |
            sudo npm install -g eslint
            npm run lint
  
  lint-docker:
    docker:
      - image: << pipeline.parameters.stretch_image >>
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [node-build]
      # Your job code here
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            hadolint ./Dockerfile

  smoke-test:
    docker:
      - image: << pipeline.parameters.stretch_image >>
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update tar jq gzip curl nodejs npm
            pip install awscli
      - run:
          name: Get backend url, run Backend smoke test.
          command: |
            # your code here
            cat .circleci/ansible/inventory.txt
            export BACKEND_IP=$(sed -n 2p .circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:$PROD_PORT"
            echo $API_URL
            if curl -s --head ${API_URL} 
            then
              echo "Backend Smoke test successful."
              return 0
            else
              echo "Backend Smoke test unsuccessful."
              return 1
            fi
      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:5}

  push-app-dockerhub:
    machine: true
    steps:
      - checkout
      - run:
          name: Build docker container and push to docker hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "${DOCKER_USR}" --password-stdin
            docker build -t devopscapstone:latest .
            docker images ls
            docker tag devopscapstone:latest ${DOCKER_USR}/devopscapstone:latest
            docker push ${DOCKER_USR}/devopscapstone:latest
  
  deploy:
    machine: true
    steps:
      - checkout
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            sudo apt-get install unzip -y
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Update Docker Image in ECS
          command: |
            echo "Pre-Build Steps:"
            echo "authenticating with AWS ECR..."
            aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin 935363217793.dkr.ecr.eu-west-2.amazonaws.com

            echo "Build Steps:"
            echo "building image..."
            docker build -t ${DOCKER_USR}/devopscapstone:latest .
            
            echo "Post-Build Steps:"
            echo "pushing image to AWS ECR..."
            docker push ${DOCKER_USR}/devopscapstone:latest
            
            echo "updating AWS ECS service..."
            aws ecs update-service --cluster devopscapstone --service devopscapstone-sv --force-new-deployment --no-cli-pager
            
            echo "Done!"
 
  
  deploy-cluster:
    docker: 
    - image: << pipeline.parameters.amazon_image >>
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            yum install -y ansible tar gzip openssl
            curl --silent --location -o /usr/local/bin/kubectl https://amazon-eks.s3.eu-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl
            chmod +x /usr/local/bin/kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
    
      - run:
          name: Create EKS Cluster
          command: |
            cd .circleci/
            ls -al
            # rm ./kubeconfig
            eksctl create cluster -f cluster.yml
            config=$(cat /root/.kube/config)
            echo ${config} > ./kubeconfig
            kubectl get nodes
            kubectl get pods -A -o wide
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/kubeconfig
      # Here's where you will add some code to rollback on failure      
      - destroy-cluster

  deploy-app-v1:
    docker: 
    - image: << pipeline.parameters.amazon_image >>
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            yum install -y ansible tar gzip openssl
            curl --silent --location -o /usr/local/bin/kubectl https://amazon-eks.s3.eu-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl
            chmod +x /usr/local/bin/kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
      
      - attach_workspace:
          at: ~/
      
      - run:
          name: Deploy Docker Application
          command: |
            aws eks --region eu-west-2 update-kubeconfig --name devopscapstone
            cd kubernetes/
            ls -al
            kubectl get svc
            kubectl apply -f .
            kubectl get pods,deploy,svc -o wide --show-labels  
      
      # Here's where you will add some code to rollback on failure      
      - destroy-cluster

  deploy-app-v2:
    docker: 
    - image: << pipeline.parameters.amazon_image >>
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            yum install -y ansible tar gzip openssl
            curl --silent --location -o /usr/local/bin/kubectl https://amazon-eks.s3.eu-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl
            chmod +x /usr/local/bin/kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
      
      - run:
          name: Deploy Docker Application v2
          command: |
            aws eks --region eu-west-2 update-kubeconfig --name devopscapstone
            cd kubernetes/
            ls -al
            kubectl set image deployment/techtrends aalatishe86/apptrends:v2
            kubectl rollout status deployment/techtrends
            kubectl get pods,rs,deploy,svc -o wide --show-labels 


workflows:
  default:
    jobs:
      - pipeline_id_job
      - build-node-app
      - scan-node-app:
          requires: [build-node-app]
      - lint-node-app:
          requires: [scan-node-app]
      - lint-docker:
          requires: [lint-node-app]
      # - smoke-test:
      #     requires: [deploy-node-app]
      #     filters:
      #       branches:
      #         only:
      #           - master
      # - push-app-dockerhub:
      #     requires: [lint-node-app]
      #     filters:
      #       branches:
      #         only:
      #           - master
      - deploy:
          requires: [lint-docker]
      - deploy-cluster:
          requires: [deploy]
          